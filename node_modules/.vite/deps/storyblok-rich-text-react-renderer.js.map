{
  "version": 3,
  "sources": ["../../storyblok-rich-text-react-renderer/src/index.js"],
  "sourcesContent": ["import React from 'react';\n\nexport const NODE_HEADING = 'heading';\nexport const NODE_CODEBLOCK = 'code_block';\nexport const NODE_PARAGRAPH = 'paragraph';\nexport const NODE_QUOTE = 'blockquote';\nexport const NODE_OL = 'ordered_list';\nexport const NODE_UL = 'bullet_list';\nexport const NODE_LI = 'list_item';\nexport const NODE_HR = 'horizontal_rule';\nexport const NODE_BR = 'hard_break';\nexport const NODE_IMAGE = 'image';\nexport const NODE_EMOJI = 'emoji';\n\nexport const MARK_BOLD = 'bold';\nexport const MARK_ITALIC = 'italic';\nexport const MARK_STRIKE = 'strike';\nexport const MARK_UNDERLINE = 'underline';\nexport const MARK_CODE = 'code';\nexport const MARK_LINK = 'link';\nexport const MARK_STYLED = 'styled';\nexport const MARK_SUBSCRIPT = 'subscript';\nexport const MARK_SUPERSCRIPT = 'superscript';\nexport const MARK_HIGHLIGHT = 'highlight';\nexport const MARK_TEXT_STYLE = 'textStyle';\nexport const MARK_ANCHOR = 'anchor';\n\nexport function render(document, options = {}) {\n    if (\n        typeof document === 'object' &&\n        document.type === 'doc' &&\n        Array.isArray(document.content)\n    ) {\n        const {\n            blokResolvers = {},\n            defaultBlokResolver = () => null,\n            nodeResolvers: customNodeResolvers = {},\n            markResolvers: customMarkResolvers = {},\n            textResolver = str => str,\n        } = options;\n\n        const nodeResolvers = {\n            ...defaultNodeResolvers,\n            ...customNodeResolvers,\n        };\n\n        const markResolvers = {\n            ...defaultMarkResolvers,\n            ...customMarkResolvers,\n        };\n\n        let currentKey = 0;\n\n        const addKey = element =>\n            React.isValidElement(element)\n                ? React.cloneElement(element, { key: currentKey++ })\n                : element;\n\n        const renderNodes = nodes => {\n            const elements = nodes\n                ? nodes.map(renderNode).filter(node => node != null)\n                : null;\n            return Array.isArray(elements) && elements.length === 0\n                ? null\n                : elements;\n        };\n\n        const renderNode = node => {\n            if (node.type === 'blok') {\n                const { body } = node.attrs;\n                return body.map(({ component, ...props }) => {\n                    const resolver = blokResolvers[component];\n                    const element = resolver\n                        ? resolver(props)\n                        : defaultBlokResolver(component, props);\n                    return addKey(element);\n                });\n            } else {\n                let childNode;\n                if (node.type === 'text') {\n                    childNode = textResolver(node.text);\n                } else {\n                    const resolver = nodeResolvers[node.type];\n                    childNode = resolver\n                        ? addKey(resolver(renderNodes(node.content), node.attrs))\n                        : null;\n                }\n                const marks = node.marks ?? [];\n                return marks.reduceRight((children, mark) => {\n                    const resolver = markResolvers[mark.type];\n                    return resolver\n                        ? addKey(resolver(children, mark.attrs))\n                        : children;\n                }, childNode);\n            }\n        };\n\n        return renderNodes(document.content);\n    } else if (typeof document === 'string') {\n        const {\n          defaultStringResolver = (str) => str,\n          textResolver = (str) => str,\n        } = options;\n        return defaultStringResolver(textResolver(document));\n    }\n    return null;\n}\n\nconst simpleNodeResolver = element => children =>\n    children != null ? React.createElement(element, null, children) : null;\n\nconst emptyNodeResolver = element => () =>\n    React.createElement(element);\n\nconst headingNodeResolver = (children, props) =>\n    React.createElement(`h${props.level}`, null, children);\n\nconst imageNodeResolver = (children, props) =>\n    React.createElement('img', props, children);\n\nconst codeblockNodeResolver = (children, props) => {\n    const codeProps = { className: props.class };\n    const code = React.createElement('code', codeProps, children);\n    return React.createElement('pre', null, code);\n};\n\nconst emojiNodeResolver = (_, attrs) => {\n    if (!attrs) return null;\n    const props = {\n        'data-type': 'emoji',\n        'data-name': attrs.name,\n        emoji: attrs.emoji,\n    }\n    if (attrs.emoji || !attrs.fallbackImage) {\n        return React.createElement('span', props, attrs.emoji);\n    } else {\n        const fallbackProps = {\n            src: attrs.fallbackImage,\n            draggable: 'false',\n            loading: 'lazy',\n            align: 'absmiddle',\n            alt: attrs.name,\n        };\n        const fallback = React.createElement('img', fallbackProps);\n        return React.createElement('span', props, fallback);\n    }\n};\n\nconst simpleMarkResolver = element => children =>\n    React.createElement(element, null, children);\n\nconst linkMarkResolver = (children, attrs) => {\n    const props = attrs ? {\n        href: attrs.linktype === 'email' ? `mailto:${attrs.href}` : attrs.href,\n        target: attrs.target,\n    } : {};\n    return React.createElement('a', props, children);\n};\n\nconst styledMarkResolver = (children, attrs) => {\n    const props = attrs ? { className: attrs.class } : {};\n    return React.createElement('span', props, children);\n}\n\nconst highlightMarkResolver = (children, attrs) => {\n    const props = attrs ? { style: { backgroundColor: attrs.color } } : {};\n    return React.createElement('span', props, children);\n}\n\nconst textStyleMarkResolver = (children, attrs) => {\n    const props = attrs?.color ? { style: { color: attrs.color } } : {};\n    return React.createElement('span', props, children);\n}\n\nconst anchorMarkResolver = (children, attrs) => {\n    const props = attrs ? { id: attrs.id } : {};\n    return React.createElement('span', props, children);\n}\n\nconst defaultNodeResolvers = {\n    [NODE_HEADING]: headingNodeResolver,\n    [NODE_CODEBLOCK]: codeblockNodeResolver,\n    [NODE_IMAGE]: imageNodeResolver,\n    [NODE_PARAGRAPH]: simpleNodeResolver('p'),\n    [NODE_QUOTE]: simpleNodeResolver('blockquote'),\n    [NODE_OL]: simpleNodeResolver('ol'),\n    [NODE_UL]: simpleNodeResolver('ul'),\n    [NODE_LI]: simpleNodeResolver('li'),\n    [NODE_HR]: emptyNodeResolver('hr'),\n    [NODE_BR]: emptyNodeResolver('br'),\n    [NODE_EMOJI]: emojiNodeResolver,\n};\n\nconst defaultMarkResolvers = {\n    [MARK_LINK]: linkMarkResolver,\n    [MARK_STYLED]: styledMarkResolver,\n    [MARK_BOLD]: simpleMarkResolver('b'),\n    [MARK_ITALIC]: simpleMarkResolver('i'),\n    [MARK_STRIKE]: simpleMarkResolver('s'),\n    [MARK_UNDERLINE]: simpleMarkResolver('u'),\n    [MARK_CODE]: simpleMarkResolver('code'),\n    [MARK_SUBSCRIPT]: simpleMarkResolver('sub'),\n    [MARK_SUPERSCRIPT]: simpleMarkResolver('sup'),\n    [MARK_HIGHLIGHT]: highlightMarkResolver,\n    [MARK_TEXT_STYLE]: textStyleMarkResolver,\n    [MARK_ANCHOR]: anchorMarkResolver,\n};\n"],
  "mappings": "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",
  "names": ["NODE_HEADING", "NODE_CODEBLOCK", "NODE_PARAGRAPH", "NODE_QUOTE", "NODE_OL", "NODE_UL", "NODE_LI", "NODE_HR", "NODE_BR", "NODE_IMAGE", "NODE_EMOJI", "MARK_BOLD", "MARK_ITALIC", "MARK_STRIKE", "MARK_UNDERLINE", "MARK_CODE", "MARK_LINK", "MARK_STYLED", "MARK_SUBSCRIPT", "MARK_SUPERSCRIPT", "MARK_HIGHLIGHT", "MARK_TEXT_STYLE", "MARK_ANCHOR", "render", "document", "options", "type", "Array", "isArray", "content", "_options$blokResolver", "blokResolvers", "_options$defaultBlokR", "defaultBlokResolver", "_options$nodeResolver", "nodeResolvers", "customNodeResolvers", "_options$markResolver", "markResolvers", "customMarkResolvers", "_options$textResolver", "textResolver", "str", "_objectSpread", "defaultNodeResolvers", "defaultMarkResolvers", "currentKey", "addKey", "element", "React", "isValidElement", "cloneElement", "key", "renderNodes", "nodes", "elements", "map", "renderNode", "filter", "node", "length", "body", "attrs", "_ref", "component", "props", "_objectWithoutProperties", "_excluded", "resolver", "_node$marks", "childNode", "text", "marks", "reduceRight", "children", "mark", "_options$defaultStrin", "defaultStringResolver", "_options$textResolver2", "simpleNodeResolver", "createElement", "emptyNodeResolver", "headingNodeResolver", "level", "imageNodeResolver", "codeblockNodeResolver", "codeProps", "className", "class", "code", "emojiNodeResolver", "_", "name", "emoji", "fallbackImage", "fallbackProps", "src", "draggable", "loading", "align", "alt", "fallback", "simpleMarkResolver", "linkMarkResolver", "href", "linktype", "target", "styledMarkResolver", "highlightMarkResolver", "style", "backgroundColor", "color", "textStyleMarkResolver", "anchorMarkResolver", "id"]
}
